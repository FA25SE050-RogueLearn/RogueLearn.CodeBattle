// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package store

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EventRequestStatus string

const (
	EventRequestStatusPending  EventRequestStatus = "pending"
	EventRequestStatusApproved EventRequestStatus = "approved"
	EventRequestStatusRejected EventRequestStatus = "rejected"
)

func (e *EventRequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventRequestStatus(s)
	case string:
		*e = EventRequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EventRequestStatus: %T", src)
	}
	return nil
}

type NullEventRequestStatus struct {
	EventRequestStatus EventRequestStatus
	Valid              bool // Valid is true if EventRequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EventRequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventRequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventRequestStatus), nil
}

type EventType string

const (
	EventTypeCodeBattle EventType = "code_battle"
	EventTypeWorkshop   EventType = "workshop"
	EventTypeSeminar    EventType = "seminar"
	EventTypeSocial     EventType = "social"
)

func (e *EventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventType(s)
	case string:
		*e = EventType(s)
	default:
		return fmt.Errorf("unsupported scan type for EventType: %T", src)
	}
	return nil
}

type NullEventType struct {
	EventType EventType
	Valid     bool // Valid is true if EventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventType) Scan(value interface{}) error {
	if value == nil {
		ns.EventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventType), nil
}

type RoomPlayerState string

const (
	RoomPlayerStatePresent      RoomPlayerState = "present"
	RoomPlayerStateDisconnected RoomPlayerState = "disconnected"
	RoomPlayerStateLeft         RoomPlayerState = "left"
	RoomPlayerStateCompleted    RoomPlayerState = "completed"
)

func (e *RoomPlayerState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoomPlayerState(s)
	case string:
		*e = RoomPlayerState(s)
	default:
		return fmt.Errorf("unsupported scan type for RoomPlayerState: %T", src)
	}
	return nil
}

type NullRoomPlayerState struct {
	RoomPlayerState RoomPlayerState
	Valid           bool // Valid is true if RoomPlayerState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoomPlayerState) Scan(value interface{}) error {
	if value == nil {
		ns.RoomPlayerState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoomPlayerState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoomPlayerState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoomPlayerState), nil
}

type SubmissionStatus string

const (
	SubmissionStatusEventUnspecified SubmissionStatus = "event_unspecified"
	SubmissionStatusPending          SubmissionStatus = "pending"
	SubmissionStatusAccepted         SubmissionStatus = "accepted"
	SubmissionStatusWrongAnswer      SubmissionStatus = "wrong_answer"
	SubmissionStatusLimitExceed      SubmissionStatus = "limit_exceed"
	SubmissionStatusRuntimeError     SubmissionStatus = "runtime_error"
	SubmissionStatusCompilationError SubmissionStatus = "compilation_error"
)

func (e *SubmissionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubmissionStatus(s)
	case string:
		*e = SubmissionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SubmissionStatus: %T", src)
	}
	return nil
}

type NullSubmissionStatus struct {
	SubmissionStatus SubmissionStatus
	Valid            bool // Valid is true if SubmissionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubmissionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SubmissionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubmissionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubmissionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubmissionStatus), nil
}

type CodeProblem struct {
	ID               pgtype.UUID
	Title            string
	ProblemStatement string
	Difficulty       int32
	CreatedAt        pgtype.Timestamptz
}

type CodeProblemLanguageDetail struct {
	CodeProblemID     pgtype.UUID
	LanguageID        pgtype.UUID
	SolutionStub      string
	DriverCode        string
	TimeConstraintMs  int32
	SpaceConstraintMb int32
}

type CodeProblemTag struct {
	CodeProblemID pgtype.UUID
	TagID         pgtype.UUID
}

type Event struct {
	ID                 pgtype.UUID
	Title              string
	Description        string
	Type               EventType
	StartedDate        pgtype.Timestamptz
	EndDate            pgtype.Timestamptz
	MaxGuilds          pgtype.Int4
	MaxPlayersPerGuild pgtype.Int4
	NumberOfRooms      pgtype.Int4
	GuildsPerRoom      pgtype.Int4
	RoomNamingPrefix   pgtype.Text
	OriginalRequestID  pgtype.UUID
}

type EventCodeProblem struct {
	EventID       pgtype.UUID
	CodeProblemID pgtype.UUID
	Score         int32
}

type EventGuildParticipant struct {
	EventID  pgtype.UUID
	GuildID  pgtype.UUID
	JoinedAt pgtype.Timestamptz
	RoomID   pgtype.UUID
}

type EventRequest struct {
	ID                   pgtype.UUID
	Status               EventRequestStatus
	RequesterGuildID     pgtype.UUID
	ProcessedByAdminID   pgtype.UUID
	CreatedAt            pgtype.Timestamptz
	ProcessedAt          pgtype.Timestamptz
	EventType            EventType
	Title                string
	Description          string
	ProposedStartDate    pgtype.Timestamptz
	ProposedEndDate      pgtype.Timestamptz
	Notes                pgtype.Text
	ParticipationDetails []byte
	RoomConfiguration    []byte
	EventSpecifics       []byte
	RejectionReason      pgtype.Text
	ApprovedEventID      pgtype.UUID
}

type GuildLeaderboardEntry struct {
	ID           pgtype.UUID
	GuildID      pgtype.UUID
	GuildName    string
	EventID      pgtype.UUID
	Rank         int32
	TotalScore   int32
	SnapshotDate pgtype.Timestamptz
}

type Language struct {
	ID           pgtype.UUID
	Name         string
	CompileCmd   string
	RunCmd       string
	TempFileDir  pgtype.Text
	TempFileName pgtype.Text
}

type LeaderboardEntry struct {
	ID           pgtype.UUID
	UserID       pgtype.UUID
	Username     string
	EventID      pgtype.UUID
	Rank         int32
	Score        int32
	SnapshotDate pgtype.Timestamptz
}

type Room struct {
	ID          pgtype.UUID
	EventID     pgtype.UUID
	Name        string
	Description string
	CreatedDate pgtype.Timestamptz
}

type RoomPlayer struct {
	RoomID         pgtype.UUID
	UserID         pgtype.UUID
	Username       string
	Score          int32
	Place          pgtype.Int4
	State          RoomPlayerState
	DisconnectedAt pgtype.Timestamptz
	JoinedAt       pgtype.Timestamptz
}

type Submission struct {
	ID               pgtype.UUID
	UserID           pgtype.UUID
	CodeProblemID    pgtype.UUID
	LanguageID       pgtype.UUID
	RoomID           pgtype.UUID
	CodeSubmitted    string
	Status           SubmissionStatus
	ExecutionTimeMs  pgtype.Int4
	SubmittedAt      pgtype.Timestamptz
	SubmittedGuildID pgtype.UUID
}

type Tag struct {
	ID        pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamptz
}

type TestCase struct {
	ID             pgtype.UUID
	CodeProblemID  pgtype.UUID
	Input          string
	ExpectedOutput string
	IsHidden       bool
}
