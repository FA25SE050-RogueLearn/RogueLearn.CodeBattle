// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package store

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EventType string

const (
	EventTypeCodeBattle EventType = "code_battle"
	EventTypeWorkshop   EventType = "workshop"
	EventTypeSeminar    EventType = "seminar"
	EventTypeSocial     EventType = "social"
)

func (e *EventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventType(s)
	case string:
		*e = EventType(s)
	default:
		return fmt.Errorf("unsupported scan type for EventType: %T", src)
	}
	return nil
}

type NullEventType struct {
	EventType EventType
	Valid     bool // Valid is true if EventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventType) Scan(value interface{}) error {
	if value == nil {
		ns.EventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventType), nil
}

type CodeProblem struct {
	ID               pgtype.UUID
	Title            string
	ProblemStatement string
	Difficulty       int32
	CreatedAt        pgtype.Timestamptz
}

type CodeProblemLanguageDetail struct {
	CodeProblemID     pgtype.UUID
	LanguageID        pgtype.UUID
	SolutionStub      string
	DriverCode        string
	TimeConstraintMs  int32
	SpaceConstraintMb int32
}

type CodeProblemTag struct {
	CodeProblemID pgtype.UUID
	TagID         pgtype.UUID
}

type Event struct {
	ID          pgtype.UUID
	Title       string
	Description string
	Type        EventType
	StartedDate pgtype.Timestamptz
	EndDate     pgtype.Timestamptz
}

type EventCodeProblem struct {
	EventID       pgtype.UUID
	CodeProblemID pgtype.UUID
	Score         int32
}

type EventGuildParticipant struct {
	EventID  pgtype.UUID
	GuildID  pgtype.UUID
	JoinedAt pgtype.Timestamptz
	RoomID   pgtype.UUID
}

type GuildLeaderboardEntry struct {
	ID           pgtype.UUID
	GuildID      pgtype.UUID
	EventID      pgtype.UUID
	Rank         int32
	TotalScore   int32
	SnapshotDate pgtype.Timestamptz
}

type Language struct {
	ID         pgtype.UUID
	Name       string
	CompileCmd string
	RunCmd     string
}

type LeaderboardEntry struct {
	ID           pgtype.UUID
	UserID       pgtype.UUID
	EventID      pgtype.UUID
	Rank         int32
	Score        int32
	SnapshotDate pgtype.Timestamptz
}

type Room struct {
	ID          pgtype.UUID
	EventID     pgtype.UUID
	Name        string
	Description string
	CreatedDate pgtype.Timestamptz
}

type RoomPlayer struct {
	RoomID         pgtype.UUID
	UserID         pgtype.UUID
	Score          int32
	Place          pgtype.Int4
	State          pgtype.Text
	DisconnectedAt pgtype.Timestamptz
}

type Submission struct {
	ID               pgtype.UUID
	UserID           pgtype.UUID
	CodeProblemID    pgtype.UUID
	LanguageID       pgtype.UUID
	RoomID           pgtype.UUID
	CodeSubmitted    string
	Status           string
	ExecutionTimeMs  pgtype.Int4
	SubmittedAt      pgtype.Timestamptz
	SubmittedGuildID pgtype.UUID
}

type Tag struct {
	ID        pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamptz
}

type TestCase struct {
	ID             pgtype.UUID
	CodeProblemID  pgtype.UUID
	Input          []byte
	ExpectedOutput []byte
	IsHidden       bool
}
