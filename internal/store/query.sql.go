// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (title, description, type, started_date, end_date)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, description, type, started_date, end_date
`

type CreateEventParams struct {
	Title       string
	Description string
	Type        EventType
	StartedDate pgtype.Timestamptz
	EndDate     pgtype.Timestamptz
}

// Events
func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Title,
		arg.Description,
		arg.Type,
		arg.StartedDate,
		arg.EndDate,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.StartedDate,
		&i.EndDate,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, title, description, type, started_date, end_date FROM events
ORDER BY started_date ASC
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Type,
			&i.StartedDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
